{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","notification","includes","className","Persons","persons","deletePerson","map","person","name","number","onClick","Search","search","onChange","onSubmit","event","preventDefault","value","PersonForm","addName","newName","newNumber","onChangeName","onChangeNumber","type","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","setNewNotification","useEffect","personService","createNotification","message","setTimeout","personsToShow","filter","toLowerCase","target","personToUpdate","toLocaleLowerCase","window","confirm","returnedPerson","item","concat","catch","error","console","log","nameObject","length","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1be927fb.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) =>{\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { \n  getAll, create, update, deletePerson\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons.js'\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null\n  }\n\n  if (notification.includes('Error'))\n    return (\n      <div className=\"errorRed error\">\n        {notification}\n      </div>\n    )\n\n  return (\n    <div className=\"error\">\n      {notification}\n    </div>\n  )\n}\n\n\n\nconst Persons = ({ persons, deletePerson }) => {\n  return (\n    <ul>\n      {persons.map(person =>\n        <li key={person.id}>{person.name} {person.number}\n          <button id={\"delete_\" + person.id} onClick={() => deletePerson(person)} >delete</button>\n        </li>\n      )}\n    </ul>)\n\n}\n\nconst Search = ({ search, onChange }) => {\n  return (<form onSubmit={(event) => event.preventDefault()}>\n    <div>\n      search:\n      <input value={search} onChange={onChange} />\n    </div>\n  </form>)\n}\n\nconst PersonForm = ({ addName, newName, newNumber, onChangeName, onChangeNumber }) => {\n  return (\n    <form onSubmit={addName}>\n      <div>\n        name:\n        <input value={newName} onChange={onChangeName} />\n      </div>\n      <div>number: <input value={newNumber} onChange={onChangeNumber} /></div>\n      <button type=\"submit\">add</button>\n    </form>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [search, setNewSearch] = useState('')\n  const [notification, setNewNotification] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => { setPersons(response) })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    if (persons.map((person) => person\n      .name\n      .toLowerCase())\n      .includes(newName.toLowerCase())) {\n\n      let personToUpdate = persons.filter(person => person.name.toLowerCase() == newName.toLocaleLowerCase())[0]\n\n      if (window.confirm(`${personToUpdate.name} already exists in the phonebook, update the phone number?`))\n        personService\n          .update(personToUpdate.id, { name: newName, number: newNumber })\n          .then(returnedPerson => {\n            setPersons(persons.filter(item => item != personToUpdate).concat(returnedPerson))\n            createNotification(`${newName} number changed to ${newNumber}`)\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch(error => {\n            console.log(error.response.data)\n            createNotification(`Error: ${error.response.data.error}`)\n          })\n    } else {\n\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1,\n      }\n      personService\n        .create(nameObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          createNotification(`${newName} added`)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          console.log(error.response.data)\n          createNotification(`Error: ${error.response.data.error}`)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleSearchChange = (event) => setNewSearch(event.target.value)\n  const deletePerson = (person) => {\n    if (window.confirm(`Delete ${person.name}?`))\n      personService\n        .deletePerson(person.id)\n        .then(\n          setPersons(persons.filter(item => item != person))\n        ).catch(e => createNotification(`Error: Person was already removed from the server`))\n  }\n\n  const createNotification = (message) => {\n    setNewNotification(message)\n    setTimeout(() => { setNewNotification(null) }, 5000)\n  }\n\n  const personsToShow = search === '' ?\n    persons :\n    persons.filter(person => person\n      .name\n      .toLowerCase()\n      .includes(search.toLowerCase())\n    )\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Search search={search} onChange={handleSearchChange} />\n\n      <h2>Add new</h2>\n      <PersonForm addName={addName}\n        newName={newName}\n        newNumber={newNumber}\n        onChangeNumber={handleNumberChange}\n        onChangeName={handleNameChange} />\n\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}